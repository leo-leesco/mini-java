# 2 "lexer.mll"
 
  open Lexing
  open Ast
  open Parser

  exception Lexing_error of string

  let kwd_tbl = [
    "boolean", BOOLEAN;
    "class", CLASS;
    "else", ELSE;
    "extends", EXTENDS;
    "false", CST (Cbool false);
    "for", FOR;
    "if", IF;
    "instanceof", INSTANCEOF;
    "int", INT;
    "new", NEW;
    "null", NULL;
    "public", PUBLIC;
    "return", RETURN;
    "static", STATIC;
    "this", THIS;
    "true", CST (Cbool true);
    "void", VOID;
  ]
  let id_or_kwd s = try List.assoc s kwd_tbl with _ -> IDENT s

  let newline lexbuf =
    let pos = lexbuf.lex_curr_p in
    lexbuf.lex_curr_p <-
      { pos with pos_lnum = pos.pos_lnum + 1; pos_bol = pos.pos_cnum }

  let string_buffer = Buffer.create 1024

# 38 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\223\255\224\255\225\255\078\000\226\255\227\255\228\255\
    \229\255\230\255\231\255\232\255\002\000\003\000\031\000\033\000\
    \012\000\001\000\243\255\245\255\246\255\247\255\248\255\249\255\
    \250\255\089\000\105\000\003\000\255\255\252\255\001\000\253\255\
    \242\255\241\255\233\255\234\255\237\255\235\255\146\000\250\255\
    \251\255\148\000\255\255\252\255\253\255\254\255\016\000\252\255\
    \253\255\254\255\049\000\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\029\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\019\000\017\000\016\000\015\000\
    \032\000\032\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\004\000\011\000\001\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\004\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\002\000\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\255\255\000\000\000\000\030\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\040\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\048\000\000\000\
    \000\000\000\000\255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\027\000\028\000\031\000\027\000\027\000\000\000\000\000\
    \027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\049\000\000\000\000\000\000\000\000\000\000\000\
    \027\000\015\000\003\000\027\000\000\000\018\000\017\000\032\000\
    \011\000\010\000\019\000\021\000\023\000\020\000\022\000\026\000\
    \005\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\050\000\024\000\012\000\014\000\013\000\037\000\
    \036\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\007\000\035\000\006\000\034\000\025\000\
    \051\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\009\000\016\000\008\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \033\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\029\000\000\000\000\000\000\000\000\000\
    \030\000\000\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\042\000\000\000\044\000\000\000\
    \025\000\000\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\041\000\000\000\
    \043\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\255\255\045\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \047\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\039\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\030\000\027\000\000\000\255\255\255\255\
    \027\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\046\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\027\000\255\255\000\000\000\000\017\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\046\000\000\000\000\000\000\000\000\000\012\000\
    \013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\014\000\000\000\015\000\000\000\
    \050\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \016\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\026\000\255\255\255\255\255\255\255\255\
    \026\000\255\255\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\038\000\255\255\041\000\255\255\
    \025\000\255\255\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\038\000\255\255\
    \041\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\030\000\041\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \046\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\038\000\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec next_token lexbuf =
   __ocaml_lex_next_token_rec lexbuf 0
and __ocaml_lex_next_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 46 "lexer.mll"
      ( newline lexbuf; next_token lexbuf )
# 189 "lexer.ml"

  | 1 ->
# 48 "lexer.mll"
      ( next_token lexbuf )
# 194 "lexer.ml"

  | 2 ->
# 50 "lexer.mll"
      ( newline lexbuf; next_token lexbuf )
# 199 "lexer.ml"

  | 3 ->
# 52 "lexer.mll"
      ( comment lexbuf; next_token lexbuf )
# 204 "lexer.ml"

  | 4 ->
let
# 53 "lexer.mll"
             id
# 210 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 54 "lexer.mll"
      ( id_or_kwd id )
# 214 "lexer.ml"

  | 5 ->
# 56 "lexer.mll"
      ( SEMICOLON )
# 219 "lexer.ml"

  | 6 ->
# 58 "lexer.mll"
      ( COMMA )
# 224 "lexer.ml"

  | 7 ->
# 60 "lexer.mll"
      ( DOT )
# 229 "lexer.ml"

  | 8 ->
# 62 "lexer.mll"
      ( PLUS )
# 234 "lexer.ml"

  | 9 ->
# 64 "lexer.mll"
      ( MINUS )
# 239 "lexer.ml"

  | 10 ->
# 66 "lexer.mll"
      ( STAR )
# 244 "lexer.ml"

  | 11 ->
# 68 "lexer.mll"
      ( SLASH )
# 249 "lexer.ml"

  | 12 ->
# 70 "lexer.mll"
      ( PERCENT )
# 254 "lexer.ml"

  | 13 ->
# 72 "lexer.mll"
      ( AMPERSANDAMPERSAND )
# 259 "lexer.ml"

  | 14 ->
# 74 "lexer.mll"
      ( VERTICALBARVERTICALBAR )
# 264 "lexer.ml"

  | 15 ->
# 76 "lexer.mll"
      ( BANG )
# 269 "lexer.ml"

  | 16 ->
# 78 "lexer.mll"
      ( EQ )
# 274 "lexer.ml"

  | 17 ->
# 80 "lexer.mll"
      ( COMP Bgt )
# 279 "lexer.ml"

  | 18 ->
# 82 "lexer.mll"
      ( COMP Bge )
# 284 "lexer.ml"

  | 19 ->
# 84 "lexer.mll"
      ( COMP Blt )
# 289 "lexer.ml"

  | 20 ->
# 86 "lexer.mll"
      ( COMP Ble )
# 294 "lexer.ml"

  | 21 ->
# 88 "lexer.mll"
      ( EQOP Beq )
# 299 "lexer.ml"

  | 22 ->
# 90 "lexer.mll"
      ( EQOP Bneq )
# 304 "lexer.ml"

  | 23 ->
# 92 "lexer.mll"
      ( LEFTPAR )
# 309 "lexer.ml"

  | 24 ->
# 94 "lexer.mll"
      ( RIGHTPAR )
# 314 "lexer.ml"

  | 25 ->
# 96 "lexer.mll"
      ( LEFTBRACE )
# 319 "lexer.ml"

  | 26 ->
# 98 "lexer.mll"
      ( RIGHTBRACE )
# 324 "lexer.ml"

  | 27 ->
# 100 "lexer.mll"
      ( LEFTBRACKET )
# 329 "lexer.ml"

  | 28 ->
# 102 "lexer.mll"
      ( RIGHTBRACKET )
# 334 "lexer.ml"

  | 29 ->
let
# 103 "lexer.mll"
               s
# 340 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 104 "lexer.mll"
      ( try CST (Cint (Int32.of_string s))
	with _ -> raise (Lexing_error "literal constant too large") )
# 345 "lexer.ml"

  | 30 ->
# 107 "lexer.mll"
      ( CST (Cstring (string lexbuf)) )
# 350 "lexer.ml"

  | 31 ->
# 109 "lexer.mll"
      ( EOF )
# 355 "lexer.ml"

  | 32 ->
let
# 110 "lexer.mll"
         c
# 361 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 111 "lexer.mll"
      ( raise (Lexing_error ("illegal character: " ^ String.make 1 c)) )
# 365 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_next_token_rec lexbuf __ocaml_lex_state

and string lexbuf =
   __ocaml_lex_string_rec lexbuf 38
and __ocaml_lex_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 115 "lexer.mll"
      ( let s = Buffer.contents string_buffer in
	Buffer.reset string_buffer;
	s )
# 379 "lexer.ml"

  | 1 ->
# 119 "lexer.mll"
      ( Buffer.add_char string_buffer '\n'; string lexbuf )
# 384 "lexer.ml"

  | 2 ->
# 121 "lexer.mll"
      ( Buffer.add_char string_buffer '"'; string lexbuf )
# 389 "lexer.ml"

  | 3 ->
# 123 "lexer.mll"
      ( Buffer.add_char string_buffer '\\'; string lexbuf )
# 394 "lexer.ml"

  | 4 ->
let
# 124 "lexer.mll"
         c
# 400 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 125 "lexer.mll"
      ( Buffer.add_char string_buffer c; string lexbuf )
# 404 "lexer.ml"

  | 5 ->
# 127 "lexer.mll"
      ( raise (Lexing_error "unterminated string") )
# 409 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_string_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 46
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 130 "lexer.mll"
         ( () )
# 421 "lexer.ml"

  | 1 ->
# 131 "lexer.mll"
         ( newline lexbuf; comment lexbuf )
# 426 "lexer.ml"

  | 2 ->
# 132 "lexer.mll"
         ( comment lexbuf )
# 431 "lexer.ml"

  | 3 ->
# 133 "lexer.mll"
         ( raise (Lexing_error "unterminated comment") )
# 436 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

# 135 "lexer.mll"
 

# 446 "lexer.ml"
