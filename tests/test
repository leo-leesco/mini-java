#!/bin/bash

shopt -s nullglob

# script de test pour le projet de compilation

option=$1
compilo=$2
score=0
max=0
verbose=0


echo "Testing $2"

echo

rm -f syntax/bad/testfile-*.java
# rm -f syntax/good/testfile-*.java
rm -f typing/bad/testfile-*.java
rm -f typing/good/testfile-*.java
ocamllex split.mll
ocaml split.ml syntax/bad/bad.split
# ocaml split.ml syntax/good/good.split
ocaml split.ml typing/bad/bad.split
ocaml split.ml typing/good/good.split

# tous les tests passent avec javac
# for f in typing/good/*.java exec/*.java exec-fail/*.java; do
#     javac $f > /dev/null ||
#      (echo "echec de javac sur $f"; exit 1)
# done
# for f in typing/bad/*.java; do
#     if javac $f > /dev/null 2>&1 ; then
#       echo "succès de javac sur $f"; exit 1
#     fi
# done

compile () {
if [[ $verbose != 0 ]]; then
  echo Compile $1 $2
  $compilo $1 $2;
else
  $compilo $1 $2 > /dev/null 2>&1;
fi;
}


# part 1 : syntax

partie1 () {

score=0
max=0

echo "Part 1"

echo -n "bad "
for f in syntax/bad/*.java; do
    echo -n ".";
    max=`expr $max + 1`;
    compile --parse-only $f;
    case $? in
	"0")
	echo
	echo "FAILURE on "$f" (should fail)";;
	"1") score=`expr $score + 1`;;
	*)
	echo
	echo "FAILURE on "$f" (for a bad reason)";;
    esac
done
echo

echo -n "good "
for f in typing/bad/*.java typing/good/*.java exec/*.java exec-fail/*.java; do
    echo -n ".";
    max=`expr $max + 1`;
    compile --parse-only $f;
    case $? in
	"1")
	echo
	echo "FAILURE on "$f" (should succeed)";;
	"0") score=`expr $score + 1`;;
	*)
	echo
	echo "FAILURE on "$f" (for a bad reason)";;
    esac
done
echo

percent=`expr 100 \* $score / $max`;

echo -n "Part 1: $score/$max : $percent%"; }

# partie 2 : tests d'analyse sémantique


partie2 () {
echo
echo "Part 2"

score=0
max=0

echo -n "bad "
for f in typing/bad/*.java; do
    echo -n ".";
    max=`expr $max + 1`;
    compile --type-only $f;
    case $? in
	"0")
	echo
	echo "FAILURE on "$f" (should fail)";;
	"1") score=`expr $score + 1`;;
	*)
	echo
	echo "FAILURE on "$f" (for a bad reason)";;
    esac
done
echo

echo -n "good "
for f in typing/good/*.java exec/*.java exec-fail/*.java; do
    echo -n ".";
    max=`expr $max + 1`;
    compile --type-only $f;
    case $? in
	"1")
	echo
	echo "FAILURE on "$f" (should succeed)";;
	"0") score=`expr $score + 1`;;
	*)
	echo
	echo "FAILURE on "$f" (for a bad reason)";;
    esac
done
echo

percent=`expr 100 \* $score / $max`;

echo    "Part 2: $score/$max : $percent%";
}


# partie 3 : tests d'exécution

partie3 () {

score_comp=0
score_out=0
score_test=0
max=0

echo
echo "Part 3"
echo "Good Execution"
echo "--------------"

for f in exec/*.java; do
    rm -f *.s exec/*.s
    echo -n "."
    asm=exec/`basename $f .java`.s
    rm -f $asm
    expected=exec/`basename $f .java`.out
    max=`expr $max + 1`;
    if compile $f; then
	rm -f out
	score_comp=`expr $score_comp + 1`;
	if gcc -no-pie $asm && ./a.out > out; then
	    score_out=`expr $score_out + 1`;
	    if cmp --quiet out $expected; then
		score_test=`expr $score_test + 1`;
	    else
		echo
		echo "FAILURE on "$f": bad output"
	    fi
	else
		echo
		echo "FAILURE on "$f": generated code crashed"
	fi
    else
	echo
	echo "FAILURE on "$f": compilation failed"
    fi
done
echo

echo "Bad Execution"
echo "-------------"

for f in exec-fail/*.java; do
    echo -n "."
    asm=exec-fail/`basename $f .java`.s
    rm -f $asm
    max=`expr $max + 1`;
    if compile $f && gcc -no-pie $asm; then
	score_comp=`expr $score_comp + 1`;
	if ./a.out > out; then
	    echo
	    echo "FAILURE on "$f" : execution should fail"
	else
	    score_test=`expr $score_test + 1`;
	    score_out=`expr $score_out + 1`;
	fi
    else
	echo
	echo "FAILURE on "$f": compilation failed (should succeed)"
    fi
done

echo
percent=`expr 100 \* $score / $max`;

echo "Part 3:";
percent=`expr 100 \* $score_comp / $max`;
echo "Compilation : $score_comp/$max : $percent%";
percent=`expr 100 \* $score_out / $max`;
echo "Generated Code : $score_out/$max : $percent%";
percent=`expr 100 \* $score_test / $max`;
echo "Code Behavior : $score_test/$max : $percent%";}


case $option in
    "-1" )
        partie1;;
    "-2" )
        partie2;;
    "-3" )
        partie3;;
    "-v1" )
	verbose=1;
	partie1;;
    "-v2" )
    	verbose=1;
        partie2;;
    "-v3" )
    	verbose=1;
        partie3;;
    "-all" )
    	partie1;
    	partie2;
    	partie3;;
    * )
        echo "usage : $0 <option> <compiler>"
        echo "options are: "
        echo "-1      : test syntax"
        echo "-2      : test type checking"
        echo "-3      : test code generation"
        echo "-all    : test everything";;

esac
echo
